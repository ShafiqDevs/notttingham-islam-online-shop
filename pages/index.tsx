import type { NextPage, GetServerSideProps } from 'next';
import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Cart from '../components/Cart';
import ProductItem from '../components/ProductItem';
import styles from '../styles/Home.module.css';
import { getProducts } from '../utils/supabase';
import { Product, CartItem, Customer } from '../utils/types';
import axios from 'axios';
import { useRouter } from 'next/router';
const { v4: uuidv4 } = require('uuid');

type PageProps = {
	products: Product[];
};

const Home: NextPage<PageProps> = (props: PageProps) => {
	const [cartItems, setCartItems] = useState<CartItem[]>([]);

	const router = useRouter();

	const Hero = () => {
		return (
			<div className='relative w-full h-[300px] md:h-[600px]'>
				<div className='flex flex-col gap-4 text-white justify-center items-center primary_gradient absolute left-0 right-0 w-full h-full z-[2]'>
					<h1 className=' text-2xl md:text-4xl'>Nottingham Islam Shop</h1>
					<h1 className=' text-sm md:text-xl'>
						Multiple Quran translations available
					</h1>
				</div>
				<img
					src={`/bg-large.jpg`}
					className={`object-cover w-full h-full`}
					alt={`bg`}
				/>
			</div>
		);
	};

	const addToCart = (product: Product) => {
		setCartItems((prev: CartItem[]) => {
			const i = prev.findIndex((item) => item.ItemName === product.ItemName);
			if (i > -1) {
				prev[i].Quantity += product.Quantity;
				prev[i].Value = Number(
					((product.Value + product.DeliveryCost) * prev[i].Quantity).toFixed(2)
				);
				return [...prev];
			} else {
				return [
					...prev,
					{
						uid: product.uid,
						ItemName: product.ItemName,
						Quantity: product.Quantity,
						Value: Number(
							(
								(product.Value + product.DeliveryCost) *
								product.Quantity
							).toFixed(2)
						),
						Image: product.Image,
					},
				];
			}
		});
	};
	const removeFromCart = (index: number) => {
		setCartItems(
			cartItems.filter((item, i) => {
				return i != index;
			})
		);
	};
	const clearCart = () => {
		setCartItems([]);
	};

	const pay = async (customer: Customer) => {
		const { data } = await axios.post(`/api/checkout`, {
			customer,
			cartItems,
		});
		router.push(data.checkout_url);
	};

	return (
		<div className='primary_gradient w-full h-fit p- relative'>
			<Hero />
			<div className=' fixed right-[5vw] bottom-[10vh] z-10'>
				<Cart
					cartItems={cartItems}
					onRemove={removeFromCart}
					onClear={clearCart}
					onPay={(customer) => pay(customer)}
				/>
			</div>
			<h1></h1>
			<div className='grid md:grid-cols-3 lg:grid-cols-4  gap-2 w-full h-full mt-11 p-7'>
				{props.products.map((product: Product) => {
					return (
						<ProductItem
							key={uuidv4()}
							product={product}
							onAdd={addToCart}
						/>
					);
				})}
			</div>
		</div>
	);
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (context) => {
	const products = await getProducts();
	if (products) {
		return {
			props: {
				products,
			},
		};
	}

	return {
		props: {},
	};
};

// <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
